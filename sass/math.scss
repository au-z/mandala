@mixin shape($a){
  position: relative;
  width: 2 * $a + px;
  height: 2 * $a + px;
}

@mixin vert($r){
  width: $r + px;
  height: $r + px;
}

@function pi() {
  @return 3.14159265359;
}

@function rad($deg){
  @return $deg * pi() / 180;
}

@function sqrt($r) {
  $x0: 1;
  $x1: $x0;
 
  @for $i from 1 through 10 {
    $x1: $x0 - ($x0 * $x0 - abs($r)) / (2 * $x0);
    $x0: $x1;
  }
 
  @return $x1;
}

@function pow($number, $exp) {
  $value: 1;

  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  } @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }

  @return $value;
}

@function fact($num) {
  $value: 1;
  @if $num > 0 {
    @for $i from 1 through $num {
      $value: $value * $i;
    }
  }
  @return $value;
}

@function sin($angle) {
  $sin: 0;
  $angle: rad($angle);
  @for $i from 0 through 10 {
    $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
  }
  @return $sin;
}

@function cos($angle) {
  $cos: 0;
  $angle: rad($angle);
  @for $i from 0 through 10 {
    $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
  }
  @return $cos;
}

@function tan($angle) {
  @return sin($angle) / cos($angle);
}

// 30-60-90 triangle functions
@function atob($num){ @return $num * sqrt(3); }
@function atoc($num){ @return 2 * $num; }
@function btoa($num){ @return sqrt((pow($num, 2) / 3)); }
@function btoc($num){ @return atoc(btoa($num)); }
@function ctoa($num){ @return $num / 2; }
@function ctob($num){ @return atob(ctoa($num)); }

// Given a, returns the distance between a equilateral triangle of dim 2a && square of dim 2a
@function adjust($num){
  @return atob($num) - btoa($num) - $num;
}